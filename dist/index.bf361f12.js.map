{"mappings":"AAAA,MAEMA,EAAaC,SAASC,eAAc,QACpCC,EAAeF,SAASC,eAAc,iBACtCE,EAAYH,SAASC,eAAc,cAEnCG,GADiBJ,SAASC,eAAc,cACvBD,SAASC,eAAc,6BCHrCI,EAAkBC,EAAkBC,GACzC,IAAIC,EDHa,GCGQD,EAErBE,EAAK,OAEJ,IAAIC,EAHCF,EDJO,GCOCE,EAAIF,KACdE,EAAKJ,EAAiBK,OAAS,GADZD,IAIvBD,EAAMG,KAAKN,EAAiBI,WAGzBD,WCZFI,EAAiBC,GAClB,IAAIC,WCJMC,EAAEC,EAAEC,GAClBA,GAAK,IACL,MAAMC,EAAIF,EAAIG,KAAKC,IAAIH,EAAG,EAAIA,GAAK,IAC7BI,EAAIC,IACR,MAAMC,GAAKD,EAAIP,EAAI,IAAM,GACnBF,EAAQI,EAAIC,EAAIC,KAAKZ,IAAIY,KAAKC,IAAIG,EAAI,EAAG,EAAIA,EAAG,IAAI,UACnDJ,KAAKK,MAAM,IAAMX,GAAOY,SAAS,IAAIC,SAAS,EAAC,eAE9CL,EAAE,KAAKA,EAAE,KAAKA,EAAE,KDJZM,CAASd,EAAME,EAAGF,EAAMG,EAAGH,EAAMI,GACvCW,EAAOzB,EAAe0B,QAAQC,kBAAkBC,WAAU,UAC9DH,EAAKI,cAAa,UAAWC,MAAMC,gBAAe,IAAOpB,IACzDc,EAAKI,cAAa,UAAWG,UAAS,IAAOrB,IACtCc,WAaNQ,EAAiBvB,GACtBZ,EAAa+B,cAAa,iBAAkBC,MAAMC,gBAAe,IAAOrB,EAAMC,MAC9Eb,EAAa+B,cAAa,iBAAkBG,UAAS,IAAOtB,EAAMC,eAZnCuB,OAC/BnC,EAAUoC,UAAS,GAEd7B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpB,IAAImB,EAAOhB,EAAiByB,GAC5BnC,EAAUqC,OAAOX,IAQrBY,CAA0B3B,GAC1BZ,EAAawC,UAAUC,IAAG,iBEpBrBC,EAAWnC,GAChBV,EAAWwC,UAAS,GAEpB9B,EAAMoC,SAAQ/B,IACV,IAAIe,EAAOzB,EAAe0B,QAAQC,kBAAkBC,WAAU,GAC9DH,EAAKI,cAAa,UAAWC,MAAMC,gBAAe,IAAOrB,EAAMC,MAC/Dc,EAAKI,cAAa,UAAWG,UAAS,IAAOtB,EAAMC,MACnDc,EAAKiB,QAAQC,GAAKjC,EAAMkC,IACxBnB,EAAKiB,QAAQ/B,IAAMD,EAAMC,IACzBc,EAAKoB,iBAAgB,SAAQ,WACzBZ,EAAiBvB,MAGrBf,EAAWyC,OAAOX,MFc1B7B,SAASC,eAAc,SAAUgD,iBAAgB,oBAH7C/C,EAAawC,UAAUQ,OAAM,4BGvB7BN,EADYvC,yBDmBZ,IAAI8C,QAAYC,MJxBD,6CIyBID,EAAIE,OCrBJC,GACmB,IAI1CC,GCDAvD,SAASC,eAAc,UAAWgD,iBAAgB,wBALjBO,GAE7BnB,yBF0BA,IAAIc,QAAYC,MAAMK,oDACJN,EAAIE,OE5BJK,OCAtB1D,SAASiC,cAAa,SAAU0B,KAAOC,OAAOC,SAASF","sources":["public/src/scripts/variables.js","public/src/scripts/pagination.js","public/src/scripts/components/activeWindow.js","public/src/scripts/helpers.js","public/src/scripts/operations.js","public/src/scripts/components/mainWindow.js","public/src/scripts/components/sidebar.js","public/src/main.js"],"sourcesContent":["const baseColorsUrl = 'http://localhost:8080/colors';\nconst perPageCount = 12;\nconst mainWindow = document.getElementById('main');\nconst activeWindow = document.getElementById('active-window');\nconst fakeTiles = document.getElementById('fake-tiles');\nconst paginationWrap = document.getElementById('pagination');\nconst swatchTemplate = document.getElementById(\"swatch-template\");\n\n\nexport { baseColorsUrl, perPageCount, mainWindow, activeWindow, fakeTiles, paginationWrap, swatchTemplate}","import { perPageCount, paginationWrap } from './variables';\nimport { placeTiles } from './operations';\n\nfunction getPaginatedTiles(activeCollection, page) {\n    let max = perPageCount * page;\n    let min = max - perPageCount;\n    let tiles = [];\n\n    for (var i = min; i < max; i++) {\n        if (i > (activeCollection.length - 1)) {\n            break;\n        } \n        tiles.push(activeCollection[i]);\n    }\n    \n    return tiles;\n}\n\nfunction handlePaginationClick(e) {\n    let page = e.target.dataset.page;\n    let tiles = getPaginatedTiles(activeCollection, page);\n\n    paginationWrap.querySelector('.active').classList.remove('active');\n    e.target.classList.add('active');\n\n    placeTiles(tiles);\n}\n\nfunction generatePagination(activeCollection) {\n    let pageCount = Math.ceil(activeCollection.length / perPageCount);\n\n    paginationWrap.innerHTML = '';\n\n    for (let i = 0; i < pageCount; i++) {\n        let el = document.createElement('li');\n        el.innerText = i + 1;\n        el.dataset.page = i + 1;\n        el.addEventListener('click', handlePaginationClick);\n        if (i === 0) el.classList.add('active');\n        paginationWrap.append(el);\n    }\n}\n\nexport { getPaginatedTiles, generatePagination }","import { activeWindow, fakeTiles, swatchTemplate } from '../variables';\nimport { HSLToHex } from '../helpers';\n\nfunction generateFakeTile(color) {\n        let hex = HSLToHex(color.h, color.s, color.l);\n        let tile = swatchTemplate.content.firstElementChild.cloneNode(true);\n        tile.querySelector('.color').style.backgroundColor = `#${hex}`;\n        tile.querySelector('.label').innerText = `#${hex}`;\n        return tile;\n}\n\nfunction generateAndPlaceFakeTiles(baseColor) {\n    fakeTiles.innerHTML = '';\n\n    for (i = 0; i < 5; i++) {\n        let tile = generateFakeTile(baseColor);\n        fakeTiles.append(tile);\n    }\n\n}\n\nfunction openActiveWindow(color) {\n    activeWindow.querySelector('.active-color').style.backgroundColor = `#${color.hex}`;\n    activeWindow.querySelector('.active-label').innerText = `#${color.hex}`;\n    generateAndPlaceFakeTiles(color);\n    activeWindow.classList.add('open');\n}\n\nfunction closeActiveWindow() {\n    activeWindow.classList.remove('open');\n}\n\ndocument.getElementById('clear').addEventListener('click', closeActiveWindow);\n\nexport { openActiveWindow }","function HSLToHex(h,s,l) {\n    l /= 100;\n    const a = s * Math.min(l, 1 - l) / 100;\n    const f = n => {\n      const k = (n + h / 30) % 12;\n      const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n      return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix \"0\" if needed\n    };\n    return `${f(0)}${f(8)}${f(4)}`;\n  }\n\n  //shamelessly 'borrowed' this function from github. I'm not a plagerizer\nfunction hexToHSL(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      r = parseInt(result[1], 16);\n      g = parseInt(result[2], 16);\n      b = parseInt(result[3], 16);\n      r /= 255, g /= 255, b /= 255;\n      var max = Math.max(r, g, b), min = Math.min(r, g, b);\n      var h, s, l = (max + min) / 2;\n      if(max == min){\n        h = s = 0; // achromatic\n      }else{\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max){\n          case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n          case g: h = (b - r) / d + 2; break;\n          case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n      }\n    var HSL = new Object();\n    HSL['h']=h;\n    HSL['s']=s;\n    HSL['l']=l;\n    return HSL;\n  }\n\n  function generateRandomHexColor() {\n    //also a stack overflow special just fyi\n    let n = (Math.random() * 0xfffff * 1000000).toString(16);\n    return n.slice(0, 6);\n}\n\nfunction generateRandomHSL() {\n    var h = Math.floor(Math.random() * 361);\n    var s = Math.floor(Math.random() * 101);\n    var l = Math.floor(Math.random() * 101);\n    return {h: h, s: s, l: l}; \n}\n\n  export { HSLToHex, hexToHSL, generateRandomHexColor, generateRandomHSL };","import { baseColorsUrl, mainWindow, swatchTemplate } from './variables';\nimport { generatePagination } from './pagination';\nimport { openActiveWindow } from './components/activeWindow';\n\n\nfunction placeTiles(tiles) {\n    mainWindow.innerHTML = '';\n\n    tiles.forEach(color => {\n        let tile = swatchTemplate.content.firstElementChild.cloneNode(true);\n        tile.querySelector('.color').style.backgroundColor = `#${color.hex}`;\n        tile.querySelector('.label').innerText = `#${color.hex}`\n        tile.dataset.id = color._id;\n        tile.dataset.hex = color.hex;\n        tile.addEventListener('click', function() {\n            openActiveWindow(color);\n        });\n\n        mainWindow.append(tile);\n    });\n}\n\n\nasync function getAllColors() {\n    let res = await fetch(baseColorsUrl);\n    let colors = await res.json();\n    return colors;\n}\n\n\nasync function getRandomColor() {\n    let res = await fetch(baseColorsUrl + '/random');\n    let color = await res.json();\n    return color;\n}\n\n\nexport { placeTiles, getAllColors, getRandomColor }","import { getAllColors, placeTiles } from \"../operations\";\nimport { getPaginatedTiles } from '../pagination';\n\nasync function setInitialState() {\n    let colors = await getAllColors();\n    let tiles = getPaginatedTiles(colors, 1);\n    placeTiles(tiles);\n}\n\nsetInitialState();\n","import { openActiveWindow } from \"./activeWindow\";\nimport { getRandomColor } from \"../operations\";\n\nasync function handleRandomClick(e) {\n    let color = await getRandomColor();\n    openActiveWindow(color);\n}\n\ndocument.getElementById('random').addEventListener('click', handleRandomClick);","let activeCollection = {};\n\nimport './scripts/components';\n\ndocument.querySelector('.logo').href = window.location.href;\n\n"],"names":["$92bd6818e5ace77f$export$b6ec205fc2137019","document","getElementById","$92bd6818e5ace77f$export$8f90e230b63f0a99","$92bd6818e5ace77f$export$fe1a239aa16c59e4","$92bd6818e5ace77f$export$d3e40ccd22a1baf8","$18acb483dd75f986$export$e314fa2560a4084d","activeCollection","page","max","tiles","i","length","push","$c8eec8fc06c75678$var$generateFakeTile","color","hex","h","s","l","a","Math","min","f","n","k","round","toString","padStart","$fbb9ce709387b0e6$export$b685cd9ba3173d15","tile","content","firstElementChild","cloneNode","querySelector","style","backgroundColor","innerText","$c8eec8fc06c75678$export$b2ec1da986821b9e","baseColor","innerHTML","append","$c8eec8fc06c75678$var$generateAndPlaceFakeTiles","classList","add","$7eff42f670c7a9ea$export$55a9943e4835f259","forEach","dataset","id","_id","addEventListener","remove","res","fetch","json","$7eff42f670c7a9ea$export$a051665c24a3515b","$6b0b6f42905fde9c$var$setInitialState","e","$92bd6818e5ace77f$export$ecbbed6f63bbe285","$7eff42f670c7a9ea$export$dc15573ec88474fb","href","window","location"],"version":3,"file":"index.bf361f12.js.map"}